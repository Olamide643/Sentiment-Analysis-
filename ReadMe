<!-- Improved compatibility of sentiment analysis model: See: https://github.com/yourusername/Sentiment-Analysis-GRU-Model -->
<a id="readme-top"></a>
<!--
*** Thanks for checking out the Sentiment Analysis GRU Model Implementation. If you have a suggestion
*** that would make this better, please fork the repo and create a pull request
*** or simply open an issue with the tag "enhancement".
*** Don't forget to give the project a star!
*** Thanks again! Now go create something AMAZING! :D
-->

<!-- PROJECT SHIELDS -->
[![Contributors][contributors-shield]][contributors-url]
[![Forks][forks-shield]][forks-url]
[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]
[![MIT License][license-shield]][license-url]
[![LinkedIn][linkedin-shield]][linkedin-url]

<!-- PROJECT LOGO -->
<br />
<div align="center">
  <h3 align="center">Sentiment Analysis GRU Model Implementation</h3>
  <p align="center">
    A neural network architecture for sentiment analysis using Keras and Flask.
    <br />
    <a href="https://github.com/yourusername/Sentiment-Analysis-GRU-Model"><strong>Explore the docs »</strong></a>
    <br />
    <br />
    <a href="https://github.com/yourusername/Sentiment-Analysis-GRU-Model">View Demo</a>
    ·
    <a href="https://github.com/yourusername/Sentiment-Analysis-GRU-Model/issues/new?labels=bug&template=bug-report---.md">Report Bug</a>
    ·
    <a href="https://github.com/yourusername/Sentiment-Analysis-GRU-Model/issues/new?labels=enhancement&template=feature-request---.md">Request Feature</a>
  </p>
</div>

<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href="#overview">Overview</a>
    </li>
    <li>
      <a href="#key-features">Key Features</a>
      <ul>
        <li><a href="#tokenizer-initialization">Tokenizer Initialization</a></li>
        <li><a href="#model-architecture">Model Architecture</a></li>
        <li><a href="#model-compilation">Model Compilation</a></li>
      </ul>
    </li>
    <li>
      <a href="#flask-web-application">Flask Web Application</a>
      <ul>
        <li><a href="#home-route-">Home Route (`/`)</a></li>
        <li><a href="#prediction-route-">Prediction Route (`/predict`)</a></li>
      </ul>
    </li>
    <li><a href="#model-prediction-flow">Model Prediction Flow</a></li>
    <li><a href="#how-to-run-the-app">How to Run the App</a></li>
  </ol>
</details>

<!-- OVERVIEW -->
## Overview

This project implements a **Sentiment Analysis** model using a neural network architecture built with **Keras**. The model classifies text into binary sentiment categories (positive or negative) by leveraging word embeddings and **Gated Recurrent Units (GRU)** layers. The app provides a web interface for real-time sentiment analysis using **Flask**.

<p align="right">(<a href="#readme-top">back to top</a>)</p>

---

<!-- KEY FEATURES -->
## Key Features

### Tokenizer Initialization
- **Tokenizer:** A `Tokenizer` object is initialized with a vocabulary size of **10,000** most frequent words.
- **Text Preprocessing:** The tokenizer is fitted on the input data (`X`) and converts the text into integer sequences using `fit_on_texts(X)`.

### Model Architecture
1. **Embedding Layer**
   - Transforms word indices into dense vectors with an embedding size of **20**.
   - Input dimension set to **20,000** to accommodate the vocabulary size.
   - Input sequence length is defined by `len_max`.

2. **GRU Layers**
   - The model includes three **GRU** layers with decreasing unit sizes:
     - **First GRU Layer:** 16 units, returns sequences.
     - **Second GRU Layer:** 8 units, returns sequences.
     - **Third GRU Layer:** 4 units, does not return sequences (final GRU layer).

3. **Dense Layer**
   - A fully connected **Dense** layer with **1 output neuron** and a sigmoid activation function for binary classification.

### Model Compilation
- **Loss Function:** `binary_crossentropy` for binary classification.
- **Optimizer:** Adam optimizer with a learning rate of **0.001**.
- **Metric:** Accuracy to evaluate model performance.

<p align="right">(<a href="#readme-top">back to top</a>)</p>

---

<!-- FLASK WEB APPLICATION -->
## Flask Web Application

### Home Route (`/`)
- Renders a basic HTML template (`Home.html`) where users can input text for classification.

### Prediction Route (`/predict`)
- Receives **POST** requests with user input from the form.
- The input text is tokenized, padded, and fed into the model for prediction.
- If the model's prediction is greater than **0.5**, the text is classified as **Positive**, otherwise **Negative**.
- The classification result and the prediction probability are displayed on the result page.

<p align="right">(<a href="#readme-top">back to top</a>)</p>

---

<!-- MODEL PREDICTION FLOW -->
## Model Prediction Flow

### Tokenization & Padding
- The input text is tokenized and converted into integer sequences using the pre-trained tokenizer.
- **Padding** ensures that all sequences match the expected input length of **241 tokens**.

### Prediction Output
- The model outputs a value between **0 and 1**, representing the probability of the text being positive.
- A threshold of **0.5** is used to classify the input as either **Positive** or **Negative**, and the confidence percentage is displayed.

<p align="right">(<a href="#readme-top">back to top</a>)</p>

---

<!-- HOW TO RUN THE APP -->
## How to Run the App

1. Clone the repository and install the necessary dependencies:
   ```bash
   git clone <repository-url>
   cd <project-directory>
   pip install -r requirements.txt
